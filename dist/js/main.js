(function () {
'use strict';

class AccordionItem {
  constructor(element) {
    this.element = element;
    this.closed = this.element.hasAttribute('data-accordion-closed');
    this.open = this.element.hasAttribute('data-accordion-open');

    if (this.closed) {
      this.collapse();
    }

    if (this.open) {
      this.expand();
    }
  }

  collapse() {
    const itemBody = this.element.querySelector('[data-accordion-item-body]');

    if (!this.element.hasAttribute('data-accordion-closed')) {
      this.element.setAttribute('data-accordion-closed', true);

      if (this.element.hasAttribute('data-accordion-open')) {
        this.element.removeAttribute('data-accordion-open');
      }

      if (itemBody) {
        itemBody.style.display = 'none';
      }

      this.open = false;
      this.closed = true;
    }
  }

  expand() {
    const itemBody = this.element.querySelector('[data-accordion-item-body]');

    if (!this.element.hasAttribute('data-accordion-open')) {
      this.element.setAttribute('data-accordion-open', true);

      if (this.element.hasAttribute('data-accordion-closed')) {
        this.element.removeAttribute('data-accordion-closed');
      }

      if (itemBody) {
        itemBody.style.display = '';
      }

      this.open = true;
      this.closed = false;
    }
  }
}

class Accordion {
  constructor (window) {
    const element = window.document.querySelector('[data-accordion]');
    if (element) {
      this.items = [].map.call(element.children, child => new AccordionItem(child));
    } else {
      throw new Error('Can\'t find data-accordion element.');
    }
  }

  item(index) {
    return this.items[index];
  }

  collapseAll() {
    [].forEach.call(this.items, item => item.collapse());
  }

  expandAll() {
    [].forEach.call(this.items, item => item.expand());
  }
}

var accordion$1 = Accordion;

const accordion = new accordion$1(window);
accordion.collapseAll();

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
